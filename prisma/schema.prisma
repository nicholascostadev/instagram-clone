generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  description   String?
  website       String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  likes         Like[]
  comments      Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  postId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Post      Post?    @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model Like {
  id     Int     @id @default(autoincrement())
  postId Int?
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
  Post   Post?   @relation(fields: [postId], references: [id])
}

model Post {
  id          Int       @id @default(autoincrement())
  image       String
  description String?
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime  @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
